import requests
from flask import render_template, request, Blueprint
from flaskblog.models import Post
from flask import current_app
from datetime import datetime
from flaskblog import db

main = Blueprint('main', __name__)

class HackerNewsFetcher:
    TOP_STORIES_URL = 'https://hacker-news.firebaseio.com/v0/topstories.json?print=pretty'
    ITEM_URL = 'https://hacker-news.firebaseio.com/v0/item/{}.json?print=pretty'

    def fetch_and_save_news(self):
        try:
            # Fetch the latest news IDs
            top_stories_response = requests.get(self.TOP_STORIES_URL)
            top_stories = top_stories_response.json()

            # Iterate over each news ID and fetch the relevant JSON data
            for story_id in top_stories:
                item_response = requests.get(self.ITEM_URL.format(story_id))
                item_data = item_response.json()

                # Save the news data into the database
                post = Post(
                    title=item_data.get('title', 'No Title'),
                    content=item_data.get('url', 'No Content'),
                    date_posted=datetime.utcnow()
                )
                db.session.add(post)

            # Commit changes
            db.session.commit()
            print("News saved to the database.")
        except Exception as e:
            print(f"An error occurred while fetching and saving news: {e}")

    def get_latest_news_json(self):
        # Fetch the saved data from the database and convert it to a list of dictionaries
        posts_data = Post.query.all()
        return [{'title': post.title, 'content': post.content, 'date_posted': post.date_posted} for post in posts_data]

@main.route("/")
@main.route("/home")
def home():
    page = request.args.get('page', 1, type=int)
    posts = Post.query.order_by(Post.date_posted.desc()).paginate(page=page, per_page=5)
    return render_template('home.html', posts=posts)

@main.route("/about")
def about():
    return render_template('about.html', title='About')

@main.route("/newsfeed")
def newsfeed():
    try:
        print("Fetching and saving news...")
        hacker_news_fetcher = HackerNewsFetcher()
        hacker_news_fetcher.fetch_and_save_news()

        print("Getting the latest news from the database...")
        posts = Post.query.order_by(Post.date_posted.desc()).all()

        print("Rendering the template with the posts...")
        return render_template('newsfeed.html', posts=posts)

    except Exception as e:
        print(f"An error occurred: {e}")

        # You can also raise the exception to see the traceback in the console
        raise e
